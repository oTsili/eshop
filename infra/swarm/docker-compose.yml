version: "3.9"

# networks:
#   proxy:
#     driver: overlay
# internal:
#   external: false

services:
  ###### MONGODB #######
  mongo:
    image: mongo # specify image to build container from
    volumes:
      # - /home/node/app/node_modules
      - ../../mongo/db:/data/db
      - /etc/localtime:/etc/localtime:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      # MONGO_INITDB_DATABASE: eshop
    # ports:
    #   - "27017:27017"
    deploy:
      labels:
        - traefik.enable=false

    # deploy:
    #   labels:
    #     - "traefik.enable=true"
    #     - "traefik.http.routers.mongo-router.rule=Host(`test.tsilingeridis.eu`)"
    #     - "traefik.http.routers.mongo.entrypoints=web"
    #     - "traefik.http.routers.mongo.middlewares=test-redirectscheme"

    #     - "traefik.http.routers.mongo-secure.rule=Host(`test.tsilingeridis.eu`)"
    #     - "traefik.http.routers.mongo-secure.entrypoints=websecure"
    #     - "traefik.http.routers.mongo-secure.tls.certresolver=myresolver"
    #     - "traefik.http.routers.mongo-secure.service=mongo-service"
    #     - "traefik.http.services.mongo-service.loadbalancer.server.port=27017"
    # networks:
    #   # - internal
    #   - proxy

  ###### FRONTEND #######
  eshop-frontend:
    # build: # specify the directory of the Dockerfile
    #   context: ./frontend
    #   # dockerfile: Dockerfile.dev
    #   dockerfile: Dockerfile.prod
    image: eshop_frontend:latest
    # ports:
    #   - "4200:4200"
    deploy:
      labels:
        # - "traefik.enable=true"
        # - "traefik.http.routers.frontend.rule=Host(`eshop.tsilingeridis.eu`)"
        # - "traefik.http.routers.frontend.entrypoints=web"
        # - "traefik.http.routers.frontend.middlewares=test-redirectscheme"

        # - "traefik.http.routers.frontend-secure.rule=Host(`eshop.tsilingeridis.eu`)"
        # - "traefik.http.routers.frontend-secure.entrypoints=websecure"
        # - "traefik.http.routers.frontend-secure.tls.certresolver=myresolver"

        - "traefik.enable=true"
        - "traefik.http.routers.eshop-frontend.rule=Host(`eshop.tsilingeridis.eu`)"
        - "traefik.http.routers.eshop-frontend.service=eshop-frontend"
        - "traefik.http.routers.eshop-frontend.entrypoints=websecure"
        - "traefik.http.routers.eshop-frontend.tls.certresolver=myresolver"

        - "traefik.http.routers.eshop-frontend-secure.service=eshop-frontend-secure"
        - "traefik.http.services.eshop-frontend.loadbalancer.server.port=80"


        # - "traefik.http.routers.frontend-secure.service=frontend-service"
        # # - "traefik.http.routers.frontend-secure.middlewares=test-compress,test-ratelimit"
        # - "traefik.http.routers.frontend-secure.middlewares=test-compress"

        # # Services
        # - "traefik.http.services.frontend-service.loadbalancer.server.port=80"
        # # - "traefik.http.services.frontend-service.loadbalancer.server.port=4200"
        # # Compress Middleware
        # - "traefik.http.middlewares.test-compress.compress=true"
        # # Rate Limit Middleware
        # # - "traefik.http.middlewares.test-ratelimit.ratelimit.average=2"
        # # Redirect Scheme HTTP -> HTTPS
        # - "traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https"
        # - "traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true"
    volumes:
      - ../../frontend:/app
      - /etc/localtime:/etc/localtime:ro
      # use the "backend" network
    # networks:
    #   - proxy
    # - internal
    # environment:
    #   - NODE_ENV=dev

  ###### BACKEND #######
  eshop-backend:
    image: eshop_backend:latest
    # ports:
    #   - "3000:3000"
    deploy:
      labels:

        - "traefik.enable=true"
        - "traefik.http.routers.eshop-backend.rule=Host(`eshop.tsilingeridis.eu`) && (PathPrefix(`/api/`) || PathPrefix(`/images/`))"
        - "traefik.http.routers.eshop-backend.service=eshop-backend"
        - "traefik.http.routers.eshop-backend.entrypoints=websecure"
        - "traefik.http.routers.eshop-backend.tls.certresolver=myresolver"

        - "traefik.http.routers.eshop-backend-secure.service=eshop-backend-secure"
        - "traefik.http.services.eshop-backend.loadbalancer.server.port=3000"
        # - "traefik.enable=true"
        # - "traefik.http.routers.backend-router.rule=Host(`eshop.tsilingeridis.eu`) && (PathPrefix(`/api/`) || PathPrefix(`/images/`))"
        # # - "traefik.http.routers.backend-router.rule=Host(`eshop.tsilingeridis.eu`) && PathPrefix(`/api/`)"

        # - "traefik.http.routers.backend-router.entrypoints=web"
        # - "traefik.http.routers.backend-router.middlewares=test-redirectscheme"

        # - "traefik.http.routers.backend-secure.rule=Host(`eshop.tsilingeridis.eu`) && (PathPrefix(`/api/`) || PathPrefix(`/images/`))"
        # # - "traefik.http.routers.backend-secure.rule=Host(`eshop.tsilingeridis.eu`) && PathPrefix(`/images/`)"
        # - "traefik.http.routers.backend-secure.entrypoints=websecure"
        # - "traefik.http.routers.backend-secure.tls.certresolver=myresolver"
        # - "traefik.http.routers.backend-secure.service=backend-service"
        # - "traefik.http.routers.backend-secure.middlewares=test-compress"
        # - "traefik.http.services.backend-service.loadbalancer.server.port=3000"

        - "traefik.http.routers.eshop-backend.middlewares=serviceheaders"
        - "traefik.http.middlewares.serviceheaders.headers.accesscontrolalloworiginlist=*"
        - "traefik.http.middlewares.serviceheaders.headers.accesscontrolallowmethods=GET,PUT,POST,DELETE,PATCH,OPTIONS"
        - "traefik.http.middlewares.serviceheaders.headers.addvaryheader=true"
        - "traefik.http.middlewares.serviceheaders.headers.accessControlExposeHeaders=*"
        # - "traefik.http.middlewares.serviceheaders.headers.accesscontrolmaxage=100"

    # build: # specify the directory of the Dockerfile
    #   context: ./backend
    #   # dockerfile: Dockerfile.dev
    #   dockerfile: Dockerfile.prod
    depends_on:
      - mongo # link this service to the mongo service
    volumes:
      - ../../backend:/app
      - /etc/localtime:/etc/localtime:ro
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017
      SALT: $$2b$$10$$ZDX7eyQ1Ornf62rKqjlwBO
      # ME_ CONFIG_MONGODB_URL: mongodb://mongo:27017/eshop
    # use the "backend" network
    # networks:
    #   # - internal
    #   - proxy

  ###### TRAEFIK #######

  traefik:
    image: traefik:v2.3
    ports:
      - "80:80"
      - "443:443"
      # - "3000:3000"

      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - "8080:8080"
      # - "27017:27017"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Copies the Let's Encrypt certificate locally for ease of backing up
      - ./letsencrypt:/letsencrypt
        # Mounts the Traefik static configuration inside the Traefik container
      - ./traefik.http.yml:/etc/traefik/traefik.yml
      - "/etc/localtime:/etc/localtime:ro"
      # - "./traefik.toml:/traefik.toml"
      # - "./traefik_dynamic.toml:/traefik_dynamic.toml"
    # networks:
    #   - proxy
